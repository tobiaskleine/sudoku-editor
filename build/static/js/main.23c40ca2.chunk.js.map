{"version":3,"sources":["models/CharacterMapping.ts","components/SudokuGrid/SudokuGrid.tsx","util/range.ts","models/Sudoku.ts","models/SudokuAny.ts","models/SudokuFactory.ts","models/solver/DirectSolver.ts","models/solver/UniqueSolver.ts","App.tsx","reportWebVitals.ts","index.tsx","components/SudokuGrid/SudokuGrid.module.scss"],"names":["CharacterMapping","c","parseInt","charCodeAt","v","String","fromCharCode","SudokuGrid","props","sd","sudoku","data","cm","characterMapping","showHints","className","styles","table","map","r","i","j","getValue","isNew","valueToChar","range","start","end","ans","push","Sudoku","this","length","d","base","i_n","j_n","v_n","baseArray","baseRange","flatMap","ib","jb","ix","jx","SudokuAny","boxId","result","field","Math","floor","fieldId","fn","col","aggInit","agg","SudokuFactory","str","undefined","split","s","charToValue","sqrt","DirectSolver","solved","copy","forEachField","poss","rowV","getRow","colV","getColumn","boxV","getBox","getBoxId","valuesRange","filter","indexOf","getPossibilities","copySetElement","sd0","findUniqueSinglePossibility","possibilities","found","uniqueAndSingle","forEach","UniqueSolver","sdPoss","mapSudoku","console","log","rows","fieldRange","cols","boxes","boxesRange","vals","rowPoss","inx","boxFieldsFlatRange","f","getFieldCoordsByBoxIds","App","sudoku2str","solverDirect","uniqueSolver","useState","readFromString","setSd","sdOld","setSdOld","onClick","solve","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.23c40ca2.chunk.js","sourcesContent":["import {SudokuElement} from \"./Sudoku\";\n\n\nexport default class CharacterMapping {\n    charToValue(c: string): SudokuElement {\n        if (c === '0') return null\n        if (c === ' ') return null\n        if (c >= '1' && c <= '9') return parseInt(c)\n        if (c >= 'A' && c <= 'Z') return c.charCodeAt(0)-65+10;\n        return 'error';\n    }\n\n    valueToChar(v: SudokuElement): string {\n        if (v === null) return ' '\n        if (v === 'error') return '!'\n        if (v < 10) return '' + v\n        return String.fromCharCode(65 + v - 10);\n    }\n}","import React from 'react';\nimport styles from './SudokuGrid.module.scss'\nimport Sudoku from \"../../models/Sudoku\";\nimport CharacterMapping from \"../../models/CharacterMapping\";\nimport SudokuAny from \"../../models/SudokuAny\";\n\nexport type ShowHint = {\n    isNew: boolean\n}\n\ntype Props = {\n    sudoku: Sudoku,\n    showHints?: SudokuAny<ShowHint>\n    characterMapping?: CharacterMapping\n}\n\nfunction SudokuGrid(props: Props) {\n    const sd = props.sudoku.data\n    const cm = props.characterMapping || new CharacterMapping()\n    const showHints = props.showHints\n    return <div>\n        <table className={styles.table}>\n            {sd.map((r, i) => <tr key={'sdrow'+i}>\n                {r.map((v, j) => \n                    <td key={'sdrow'+i+'col'+j} className={(showHints && showHints.getValue(i,j).isNew) ? styles.isNew : ''}>{cm.valueToChar(v)}</td>\n                )}\n            </tr>)}\n        </table>\n    </div>\n}\n\nexport default SudokuGrid;","\nexport default function range(start: number, end: number): number[] {\n    var ans = [];\n    for (let i = start; i <= end; i++) {\n        ans.push(i);\n    }\n    return ans;\n}\n","import SudokuAny from \"./SudokuAny\";\n\nexport type SudokuNumber = number\nexport type SudokuElement = (SudokuNumber | \"error\" | null)\n\nexport default class Sudoku extends SudokuAny<SudokuElement>{\n    valuesRange(): SudokuNumber[] {\n        let ans = [];\n        for (let i = 1; i <= this.length(); i++) {\n            ans.push(i);\n        }\n        return ans;\n    }\n\n\n    copy(): Sudoku {\n        const d = this.data.map(r => r.map(v => v))\n        // @ts-ignore\n        return new Sudoku(this.base, d)\n    }\n\n    copySetElement(i_n: number, j_n: number, v_n: SudokuElement): Sudoku {\n        const d = this.data.map((r, i) => r.map((v, j) => {\n            if (i_n === i && j_n === j) {\n                return v_n\n            } else {\n                return v\n            }\n        }))\n        // @ts-ignore\n        return new Sudoku(this.base, d)\n    }\n}","import range from \"../util/range\";\n\nexport type SudokuFieldId = { i: number, j: number }\nexport type SudokuBoxId = { ib: number, jb: number }\nexport type SudokuBoxFieldId = { ix: number, jx: number }\n\n\nexport default class SudokuAny<AType> {\n    constructor(readonly base: number, readonly data: AType[][]) {\n    }\n\n    length(): number {\n        return this.base * this.base\n    }\n\n    baseRange(): number[] {\n        return range(0, this.base-1);\n    }\n\n    fieldRange(): number[] {\n        return range(0, this.length()-1);\n    }\n    \n    boxesRange(): SudokuBoxId[] {\n        const baseArray = this.baseRange()\n        return baseArray.flatMap(ib => baseArray.map(jb => ({ib, jb})))\n    }\n    \n    boxFieldsFlatRange(): SudokuBoxFieldId[] {\n        const baseArray = this.baseRange()\n        return baseArray.flatMap(ix => baseArray.map(jx => ({ix, jx})))\n    }\n\n    copy(): SudokuAny<AType> {\n        const d = this.data.map(r => r.map(v => v))\n        // @ts-ignore\n        return new SudokuAny<AType>(this.base, d)\n    }\n    \n    copySetElement(i_n: number, j_n: number, v_n: AType): SudokuAny<AType> {\n        const d = this.data.map((r, i) => r.map((v, j) => {\n            if (i_n === i && j_n === j) {\n                return v_n\n            } else {\n                return v\n            }\n        }))\n        // @ts-ignore\n        return new SudokuAny<AType>(this.base, d)\n    }\n\n    getValue(i: number, j: number): AType {\n        return this.data[i][j]\n    }\n\n    getRow(i: number): Array<AType> {\n        return this.data[i]\n    }\n\n    getColumn(j: number): Array<AType> {\n        return this.data.map(r => r[j])\n    }\n\n    getBox(boxId: SudokuBoxId): AType[] {\n        const ib = boxId.ib;\n        const jb = boxId.jb;\n        let result: AType[] = []\n        for (let ix = 0; ix < this.base; ix++) {\n            for (let jx = 0; jx < this.base; jx++) {\n                result.push(this.data[ib * this.base + ix][jb * this.base + jx])\n            }\n        }\n        return result\n    }\n\n    getBoxId(field: SudokuFieldId) {\n        return {ib: Math.floor(field.i / this.base), jb: Math.floor(field.j / this.base)}\n    }\n\n    getFieldCoordsByBoxIds(boxId: SudokuBoxId, fieldId: SudokuBoxFieldId): SudokuFieldId {\n        return {i: boxId.ib * this.base + fieldId.ix, j: boxId.jb * this.base + fieldId.jx}\n    }\n\n    mapSudoku<A>(fn: (v: AType, i: number, j: number, sd: SudokuAny<AType>) => A): SudokuAny<A> {\n        let result = []\n        for (let i = 0; i < this.length(); i++) {\n            let col = []\n            for (let j = 0; j < this.length(); j++) {\n                col.push(fn(this.data[i][j], i, j, this))\n            }\n            result.push(col)\n        }\n        return new SudokuAny<A>(this.base, result)\n    }\n\n    forEachField(fn: (v: AType, i: number, j: number, sd: SudokuAny<AType>) => boolean|void) {\n        for (let i = 0; i < this.length(); i++) {\n            for (let j = 0; j < this.length(); j++) {\n                if (fn(this.data[i][j], i, j, this) === false) {\n                    return;\n                }\n            }\n        }\n    }\n\n    reduceSudoku<A>(fn: (v: AType, i: number, j: number, sd: SudokuAny<AType>, agg: A) => A, aggInit: A): A {\n        let agg = aggInit\n        for (let i = 0; i < this.length(); i++) {\n            for (let j = 0; j < this.length(); j++) {\n                agg = fn(this.data[i][j], i, j, this, agg);\n            }\n        }\n        return agg;\n    }\n}","import Sudoku, {SudokuElement} from \"./Sudoku\";\nimport CharacterMapping from \"./CharacterMapping\";\n\n\nexport default class SudokuFactory {\n    \n    static readFromString(str: string, characterMapping: CharacterMapping|undefined = undefined): Sudoku {\n        const cm = characterMapping || new CharacterMapping()\n        const data = str.split('\\n').map(s => s.split('').map(c => cm.charToValue(c)))\n        const base = Math.sqrt(data.length)\n        return new Sudoku(base, data)\n    }\n    \n}","import {SudokuSolverBase} from \"./SudokuSolverBase\";\nimport Sudoku, {SudokuElement} from \"../Sudoku\";\n\n\nfunction getPossibilities(v: SudokuElement, i: number, j: number, sd: Sudoku): SudokuElement[] {\n    if (v === 'error') return [v]\n    if (v !== null) return [v]\n    const rowV = sd.getRow(i)\n    const colV = sd.getColumn(j)\n    const boxV = sd.getBox(sd.getBoxId({i, j}))\n    return sd.valuesRange().filter(v =>\n        rowV.indexOf(v) === -1 &&\n        colV.indexOf(v) === -1 &&\n        boxV.indexOf(v) === -1\n    )\n}\n\n// solve all fields where only one possibility is left\nexport default class DirectSolver implements SudokuSolverBase {\n    solve(sd: Sudoku): Sudoku {\n        let solved = sd.copy()\n        sd.forEachField((v, i, j, sd) => {\n            let poss = getPossibilities(v, i, j, solved)\n            if (poss.length === 1) {\n                solved = solved.copySetElement(i, j, poss[0])\n            } else if (poss.length === 0) {\n                solved = solved.copySetElement(i, j, 'error')\n            } else {\n                solved = solved.copySetElement(i, j, null)\n            }\n        })\n        return solved\n    }\n}","import {SudokuSolverBase} from \"./SudokuSolverBase\";\nimport Sudoku, {SudokuElement, SudokuNumber} from \"../Sudoku\";\nimport SudokuAny from \"../SudokuAny\";\n\nfunction getPossibilities(v: SudokuElement, i: number, j: number, sd0: SudokuAny<SudokuElement>): SudokuElement[] {\n    if (v === 'error') return [v]\n    if (v !== null) return [v]\n    // @ts-ignore\n    const sd: Sudoku = sd0\n    const rowV = sd.getRow(i)\n    const colV = sd.getColumn(j)\n    const boxV = sd.getBox(sd.getBoxId({i, j}))\n    return sd.valuesRange().filter(v =>\n        rowV.indexOf(v) === -1 &&\n        colV.indexOf(v) === -1 &&\n        boxV.indexOf(v) === -1\n    )\n}\n\nfunction findUniqueSinglePossibility(v: SudokuNumber, possibilities: SudokuElement[][]): SudokuNumber {\n    let found = -1;\n    let uniqueAndSingle = true;\n    if (!possibilities) debugger;\n    possibilities.forEach((poss, j) => {\n        const inx = poss.indexOf(v)\n        if (inx >= 0) {\n            uniqueAndSingle = uniqueAndSingle && (poss.length > 1) && (found === -1)\n            found = j\n            if (!uniqueAndSingle) {\n                return false\n            }\n        }\n    })\n    if (!uniqueAndSingle) {\n        return -1\n    }\n    return found\n}\n\n// solve all fields where a value fits only to one field in a row/column/box \nexport default class UniqueSolver implements SudokuSolverBase {\n    solve(sd: Sudoku): Sudoku {\n        const sdPoss: SudokuAny<SudokuElement[]> = sd.mapSudoku(getPossibilities)\n        console.log('sdPoss', sdPoss);\n        let solved = sd.copy()\n        const rows = sd.fieldRange()\n        const cols = sd.fieldRange()\n        const boxes = sd.boxesRange()\n        const vals = sd.valuesRange()\n        // rows\n        rows.forEach(i => {\n            // const unsolvedPoss = getUnsolvedByRow(sd, i)\n            const rowPoss = sdPoss.getRow(i)\n            vals.forEach(v => {\n                const inx = findUniqueSinglePossibility(v, rowPoss)\n                if (inx >= 0) {\n                    // new solution\n                    // console.log('rowPoss', rowPoss)\n                    //console.log('found unique row solution', i, inx, valueToChar(v))\n                    // printSudoku(solved)\n                    solved = solved.copySetElement(i, inx, v)\n                    sdPoss.copySetElement(i, inx, [v])\n                }\n            })\n        })\n        // cols\n        cols.forEach(j => {\n            // const unsolvedPoss = getUnsolvedByRow(sd, i)\n            vals.forEach(v => {\n                const rowPoss = sdPoss.getColumn(j)\n                const inx = findUniqueSinglePossibility(v, rowPoss)\n                if (inx >= 0) {\n                    // new solution\n                    // console.log('rowPoss', rowPoss)\n                    //console.log('found unique column solution', inx, j, valueToChar(v))\n                    // printSudoku(solved)\n                    solved = solved.copySetElement(inx, j, v)\n                    sdPoss.copySetElement(inx, j, [v])\n                }\n            })\n        })\n        // cols\n        const boxFieldsFlatRange = solved.boxFieldsFlatRange()\n        boxes.forEach(boxId => {\n            // const unsolvedPoss = getUnsolvedByRow(sd, i)\n            vals.forEach(v => {\n                const boxPoss = sdPoss.getBox(boxId)\n                const inx = findUniqueSinglePossibility(v, boxPoss)\n                if (inx >= 0) {\n                    // new solution\n                    //console.log('boxPoss', boxPoss)\n                    //console.log('found unique box solution', boxId, inx, valueToChar(v))\n                    //printSudoku(solved)\n                    //console.log('boxField', boxFields[inx])\n                    const f = sdPoss.getFieldCoordsByBoxIds(boxId, boxFieldsFlatRange[inx])\n                    solved = solved.copySetElement(f.i, f.j, v)\n                }\n            })\n        })\n        return solved\n    }\n}","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SudokuGrid, {ShowHint} from './components/SudokuGrid/SudokuGrid';\nimport Sudoku from \"./models/Sudoku\";\nimport SudokuFactory from \"./models/SudokuFactory\";\nimport DirectSolver from \"./models/solver/DirectSolver\";\nimport UniqueSolver from \"./models/solver/UniqueSolver\";\nimport SudokuAny from \"./models/SudokuAny\";\n\nfunction App() {\n    const sudoku1str = '000280000\\n004100008\\n083000200\\n030000700\\n200518009\\n005000040\\n009000620\\n700005400\\n000061000'\n    const sudoku2str = '000429000\\n001000400\\n050000030\\n900060007\\n700102004\\n600090008\\n080000050\\n004000700\\n000283000'\n    const sudoku3str = '006009007\\n530200000\\n000300020\\n907040000\\n001003280\\n000000070\\n000050900\\n000000000\\n009010630'\n    const sudoku4str = '001500000\\n702000506\\n300700000\\n420000900\\n100000004\\n000006000\\n000040050\\n040000830\\n900021000'\n    const sudoku5str = '070000804\\n005000900\\n001004002\\n000050001\\n040829070\\n900030000\\n300200700\\n009000100\\n607000050'\n    const sudoku6str = '000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000\\n000000000'\n    const sudoku7str = '190007000\\n805020000\\n000000060\\n000048901\\n001070400\\n708510000\\n030000000\\n000050103\\n000400052'\n\n    const sudoku10str = '0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000\\n0000000000000000000000000'\n    const sudoku11str = '000E000J0800000000M5276BF\\n00000E037IJ00NP0000000000\\n005I00PL0B9E73A0000K00000\\n007000000G00000600DH01C50\\n0190L0000O00C0K2G0N300000\\n8L0000KH0007300N140J0G000\\n000070L0000PBK90H000A00EC\\n00000940MJ00AC00P0LE0O000\\nG3E500D000000F008000LPNK0\\nOKH090F020008040A00000003\\nN00J08G040DF000006307000A\\n4IG10A0COP000000020060000\\n000A20003040000F0I00OLBCN\\n000007000000000CB5O0DE400\\n00000M01N032LP090JK0G0000\\nE0D0C0J00M140OH3000000F00\\n000LH00PK4N000MD0002J3006\\n3OB250000L0G090000000CIHP\\n000PFC00020B0700K1JN00500\\n00000G6N80000050L0090010O\\nD7000000000MP0002N00080F4\\n0000800A00CN0JEH50PG00000\\n04000100F36OH0000B00000M0\\n20PFJ50O0C0I1B0L000000HA7\\nBH1NO00000G0F00790060000E'\n    const sudoku12str = '10J8000KAN000E0764P030D0O\\n000H0000P3JFO000100E00400\\nAL00680010002G3HD0050000M\\n000ME0070200C10NL0300I0JH\\n40002H0000NDA0KFM08016500\\n0JA000M0060O3200F9E0G0800\\nI005MEO0K04009000DL700000\\nG0000FAP00HE07L8C1000D003\\nP3CFBN0I000M000000O000E47\\nO0KE7001090000NM000I0B0PL\\n0020A00N0PG100D00E70J00H0\\nH0M60K820000P0E0BL03D00N0\\n09OPJA0000030L000002F1IM0\\n0G00DL03H02080000K6F0790B\\n070080FE00900AIC0M0040P00\\n7A0I06000GK0000O0300HE10P\\nMK9000H0000005000I082L63A\\nN00G000AEOD70C10065J00004\\n00000PD5000I0020K0M18F00N\\n0030F0ILM006EN0P00H000C90\\n00H2N0G0LIE05DJ000097000C\\nFP0O00K04802100E0N00I9000\\nJ0000100NAO94000I00ML008F\\n00100O0030007I8BH00004000\\n50I0302HCB0N000187000PJ06'\n    \n    const solverDirect = new DirectSolver()\n    const uniqueSolver = new UniqueSolver()\n\n    const [sd, setSd] = useState(SudokuFactory.readFromString(sudoku2str))\n    const [sdOld, setSdOld] = useState(SudokuFactory.readFromString(sudoku2str))\n    \n    const showHints: SudokuAny<ShowHint> = sd.mapSudoku((v, i, j, sd) => {\n        return {\n            isNew: v !== null && sdOld.getValue(i, j) === null\n        }\n    })\n    \n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n            </header>\n            <div>\n                <SudokuGrid sudoku={sd} showHints={showHints} />\n                <button onClick={() => {\n                    setSdOld(sd)\n                    setSd(solverDirect.solve(sd))\n                }}>Solve (direct)</button>\n                <button onClick={() => {\n                    setSdOld(sd)\n                    setSd(uniqueSolver.solve(sd))\n                }}>Solve (unique)</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"SudokuGrid_table__3GesE\",\"isNew\":\"SudokuGrid_isNew__32Oe4\"};"],"sourceRoot":""}